I took a couple day break before approaching this because I'd really been overworking myself. I was also getting anxious about the rising difficulty, figuring I'm going to meet my end somewhat soon.

After requesting this I saw similarities between this question and previous ones, a sort of amalgamation of the maze task and the gear task.
I knew that I'd want to do a similar trick I did in the maze puzzle, and "lay the field" so the speak, by calculating the factors of all the numbers. Then, I'd draw relationships between the numbers to find some pattern.
I settled on a fairly basic child system. A LuckyNumber object would hold its number, the positive factors of that number, and then a list of children LuckyNumbers. These children would be other LuckyNumbers in the same list that are factors of this number.
To give an example, in this list [1, 2, 3, 4, 5, 6], LuckyNumber 6 would have the children 3, 2 and 1. LuckyNumber 3 would only have the child 1.
This allows me to construct chains from the top down, starting at 6, going to 3, and ending at 1. Much easier to visualize than a pure math answer.

Since numbers could go up to 999999 I knew I needed a fast way to find the factors of a number, and with some research I found this: https://stackoverflow.com/questions/6800193/what-is-the-most-efficient-way-of-finding-all-the-factors-of-a-number-in-python
I won't pretend to fully understand how this works, but profiling showed it was leagues faster than any method I could create alone.
It returns its answers as a set, which I was a little skeptical would make checking if a number is in the set slow, but in my research I found that sets are actually designed exactly for this, using hashing to nigh immediately find if an entry exists.

While working on this I noticed that the task contradicted itself, unfortunately. It states that numbers must follow i < j < k, yet one of the examples it provides contradicts this ([1, 1, 1] = 1)

I confidently submitted my answer to be verified. Only to have all of the hidden tests fail, and all visible ones pass.
This was the worst possible result. With this result I have no indication of what the problem is. I can't check if it's a performance issue, if it's an error in my code, anything.
Maybe the numbers it gives me aren't ordered. It'd make sense with the lore of the task.
The task mentions that they're in order, so that's not it...
Time to test random ideas.

[1, 1, 1, 1, 1, 1] returned incorrect results! Good, that's a problem I can solve.
Solved, and they still failed.
Maybe the code doesn't scale up well? I provided the worse case it could have; a list of 999999 2000 times.
At the tap of my run key, I received 2005 lines of errors. Wonderful news.
It turns out a bit of recursion I plugged in to be fancy really didn't scale up well, and was bumping against python's recursion limit. Honestly, I'm quite glad it did so that google didn't have to see that awful mess.

Removed the troubling recursion, but this has revealed my code doesn't scale well with list size. A new method would have to be used to build the chain.
As the largest number 999999 only had 64 factors, it would be much faster to check if these factors exist in the list, rather than to check if the whole list is a factor.
I went through a lot of different ideas on how to do this, and came up with a few.
But it was never enough, the checks always failed. I'd tested my program to its limit, and it had excelled, yet it would not pass.

This whole time something felt off about how I was solving this. The fact only the examples worked. That no matter how much I optimized, it wasn't passing. That one of the examples contradicted the details of the task...
I noticed that they never specified the triples had to be unique, but what they had explained didn't seem like it left room for combinations that weren't unique.
I must have reread a dozen times, but after yet another failure I decided to try again...

... There.... There was no contradiction.
I had completely misread one small sentence:
(...) "lucky triples" of (li, lj, lk) where the list indices meet the requirement i < j < k.
I thought they meant the size of the number had to be smaller, not the position of the number in the list.
My GOD.
This uproots EVERYTHING.
I have to change most of my code to solve for this.
I've spent 10 hours solving for a related, but different problem!

After another hour or two of programming, I had rearranged my code, and it now passed four out of five of the tests. Hm... The last one must be a performance issue, I thought.
I devised a new system, with new methods of figuring out the number of combinations.
With these new optimizations, my code was able to perform over 50 times faster while using a fraction of the RAM.
But it wasn't enough.
That one test continued to fail. It couldn't be a performance issue with how fast the code was now, surely... It didn't perform well if a number was repeated hundreds of times, but surely that wasn't in the test.
It had to be a bug in my code. But there's nothing I could imagine causing issues. 80% of the tests pass. I've tested all I can imagine. What could be causing this...

Maybe it is still a performance issue. That glaring issue still exists in my code; The untouched, unconquered enemy; Repeating numbers causing massive growth.
Trying to solve this was just causing more problems though...

Maybe I needed to approach this completely differently. I need to find a way to better utilize the calculations of previous numbers.

I can't completely ignore the previous numbers in case there's a new combination, but I can avoid calculating combinations that will have already been tested.
If I record how many previous numbers divide into y, then anything y divides will have all possible combinations of previous divisions and y.
Instead of the object seeking out the combinations, the combinations can come to the object. For this to work, instead of going from the top, I'll want to go from the bottom, to minimize the amount of calculations I have to perform.

Solving for this new mindset, my code functioned perfectly; Faster and more efficient than before, it surpassed all tasks with speed, and I was finally done with this challenge.






Rant I had to a friend:

For about 9 hours I had misread the fucking question and was wondering why most of the tests were failing.
However due to the total lack of feedback of why they failed, I had no clue and was running in circles till I realized they got me on a fucking technicality in the question.
So, I solved that. Great job guys, ice cream all around, right?

Ha. ha. Ha.
it's just getting started.

Now, I pass 4 out of 5 tests. 
4 out of 5, consistently.
I was like okay, my code is pretty poorly optimized, I can understand that. It uses like ~10GB of memory at the worst times, can take ~2 minutes at the worst times.
So I optimize.
It fails.
I optimize more.
It fails.
I optimize more.
it fails.

It's only ever that one question, and I start to wonder... Am I sure it's a performance issue?
I try to add a delay of like ~10 seconds to the code to ensure things time out.
Nothing new fails... But I've never gotten a wrong answer from my code.
At my current point, my code at worst finishes in 0.4 seconds.
It also uses at most 150 MB or RAM.

I have distilled this program to the point of perfection
AND THAT ONE TEST WILL NOT PASS.
I'm convinced it cannot be a performance issue considering it is using an obscene amount of tricks to calculate an obscene amount of things in a fraction of a second. 
So, I hunt down a bug in my code, right?
If only.
The calculations it is crunching are huge. 
As in, one that takes it less than 1 CPU cycle will take a human around 10 seconds to solve.
To solve for the most complex things it has would take lifetimes.
So I have no way to verify that my answers are right
it doesn't seem to be a performance issue
And 4/5 tests I've put it up against say it's fine.
I am at a complete loss at this point.