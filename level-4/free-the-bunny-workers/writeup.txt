After the last task, I received the offer to send my contact details to Google in the event they might hire me.
I spent a week or so thinking on this. Questioning if I was good enough, if my lack of work and education background would have me discarded.
I questioned whether I even wanted this job - My passions lie in game development and problem solving. How did I know this would satisfy me?

After a week of considering what I wanted I went through and filled out the form. Surprisingly, they didn't request a resume, only an optional Curriculum Vitae.
After filling it out, I figured it was time I get to work on the next task. I requested it and immediately realized it had given me two weeks this time, not one. Odd.
Reading the question I think I understood better why. It was frankly, confusing. I wasn't quite sure what it wanted of me. I sat on it for a day, thinking occasionally about it to comprehend what they requested.
The day after I decided to finally tackle it. I was fairly lost on what to do, not even sure how to figure the question out by hand.

I worked through a few examples, writing down hypotheses, but pretty quickly it became clear doing this by hand would use the next month of my life.
I though about how I could even make a brute-force algorithm to calculate this. How do I know it's right? Well, when the union of any num_required clears all doors, but no less than num_required can.
I made a function to check if an answer is correct, but actually testing all possible combinations is impossibly slow.

In my mind, there were two things I needed to figure out in order to drastically speed this up:
How many doors are there?
How many keys does each bunny have?

I took a look at the solved answers again. If I could figure out how many rooms an answer would have, this would drastically reduce the number of combinations I had to check.
While researching how I could even generate these combinations, I came across something called Pascal's triangle. It looked cool, and a tonne of cool things you could do with it.

As I looked over all of the hand-solved solutions, I wondered what the pattern is.
(3, 3) = 3, (4, 3) = 6, (5, 3) = 10... Hold on, I've seen this pattern before.
I searched the sequence, and as I suspected, it was the list of triangle numbers.
Expanding this backwards, I could determine that (n, 2) would be natural numbers, and (n, 1) would always be 1.
If this followed, I could calculate the number of doors required for any set by looking at the given position on Pascal's triangle.
I threw this together and it verified all of the existing answers I had. This allowed me to solve one of the two big questions I had. Though even with this optimization, it was still too slow to reasonably get the answer to any question.
I needed to find more before I could start generating solutions to compare against.

Looking over the numbers again, I did see another pattern that seemed to show me how many keys the bunnies would have.
It seemed that bunny keys would be the previous binomial coefficient to the number of doors. This solved the second large problem I had.

Even with these optimizations though, my method that verified if an answer was correct was the bulk of the processing time.
I either needed to find a way to massive speed it up, a way to call it less, or a way to calculate the correct answer without large number crunching.
Looking at the solutions I had though, I couldn't quite figure out how to optimize...

OH MY GOD
I SEE IT
THIS IS-
THIS FEELS LIKE IT'S FROM A STORY
The answer was right in front of me this whole time!
Take this pattern:
5, 3
  1  2  3  4  5  6  7  8  9  10
1 .  .  .  .  .  .            
2 .  .  .           .  .  .   
3 .        .  .     .  .     .
4    .     .     .  .     .  .
5       .     .  .     .  .  .

Looking at the rows, I couldn't see a pattern... They seem to randomly shift almost.
I could see some interesting properties; Each column would have 3 spots; Any two rows will share 3 columns; Any three rows will share 1 column.
What could it be...
Then, I changed my perspective.
I looked at it in terms of columns, not rows, and when you do that, you see a very clear pattern.
1,2,3
1,2,4
1,2,5
1,3,4...

It's all possible combinations of 1 to 5 in order!
The keys that go to each bunny can therefore be figured out if you know how many keys each door has to it.
I wrote this solution, verified it, and felt completely validated as it passed immediately.
