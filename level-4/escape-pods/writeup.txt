It's become a bit of a theme that when I take request a task, I can't understand what it is I need to solve, I take a day off and think about it in between shooting bad guys or something.
After fulfilling my required amount of avoiding the task, I went back and realized it was asking me to do wo-uld fit nicely on a directional graph. After arming myself with a pencil and some paper, I wrote out the examples and came up with what system I could use, and what challenges I'd face.

The system I thought of was heavily inspired by the flow of water.
I envisioned the starting node as the highest position, where the water comes in, the intermediate rooms as reservoirs, and the end node as the ocean.
I'm relying on how water in an unchanging environment will eventually reach an equilibrium, meaning the maximum amount will be reaching the ocean given the paths. The water pressure diverts excess liquid down other routes. The bunnies are of course the water.

I'd want nodes that knew how many bunnies were inside of it, and what corridors they could travel. The "start" nodes would be given infinite bunnies.
I worried maybe there'd be some combination of rooms and corridors that might mean that taking one path would always get less to the end than taking the other. Maybe a corridor would infinitely loop to itself, or one node would overflow while another starved.
I couldn't find a way to prove that in my mind though, so I settled on a hypothesis: If I just flood the grid for long enough, the corridors would eventually reach a state of equilibruim, where the maximum amount is being pushed to the exit, no matter which paths are being taken.

So, I came up with my plan for how to build this:
Rooms could store infinite bunnies.
Rooms would attempt to push their bunnies out of every corridor they have access to, sequentially.
Rooms will keep track of how many bunnies entered them last tick. If this number doesn't change between ticks, the room is said to be in "equilibrium"
If no rooms change for a tick, the system is in equilibrium, and we will be able to find our answer.


As I was working on this though, I had an idea for how my system might get into an infinite loop, and wrote it down. Indeed I'd proven it to myself, and needed a way to stop this.
I figured I could add a cap to how many bunnies a room could store, defined by how many could flow out. Once it had that many, it would refuse any more flowing in, with exits having no cap. But this seemed prone to error.

Instead, I decided to flip the system on its head: Instead of flowing from the start to the end, I could flow from the end to the start in reverse. Essentially, performing a breadth first search and pulling the water towards the end.
This allowed me to ignore side paths, as if something did not flow towards the end it was ignored, and solved the question of what order to perform the flow in.
Implementing this and testing it out seemed to show it solving the problems as I wanted, so now I just needed to implement a stopping function, and an evaluation function.
I decided I could total up how many bunnies flowed each frame, and if the numbers matched, the system was in equilibrium. I wasn't sure this fully worked, but it was the simplest answer I could think up to define equilibrium.

My examples seemed to work fine, and it ran at a lightning fast pace.
I submitted it, verified it, and finally we were-
Oh, one of the tests failed.
As the cumulative time of the tests was about 3 seconds there was no way it was a performance issue. I suspected it might be an issue with a type of looping: Nodes connected to the output could "steal" from the output, and this similar issue could happen elsewhere. The input would also allow things to flow into it, which was not supposed to happen.
For a long time, I couldn't think of a way to fix this without coming up with an entirely new method. As the "infinite" source of bunnies was the last thing to be pulled from, it meant any loop would always happen, and there's no way I can think of to detect these loops and verify that they don't add to the output.

I couldn't exactly explain why, but I tried to stick to my water analogy a bit harder. If the problem was that water wasn't flowing into the system, I would force it in. If loops happened, I would block them.
I implemented the maximum capacity for rooms, forced the start to always flow, and allowed the start nodes to bypass the capacity of rooms. This was modelled after water pressure in a system.
This would mean that all paths except those that lead to the exit would block up, and the maximum amount would be flowing out.

I implemented this, it solved many of the issues I had seen, but it still didn't past the final test...
I had no more ideas for a while. I was incredibly anxious that I was going to fail. Suck cost fallacy encouraged me to stick to this method.
I modelled many situations. Maybe..
I found one small bug, allowing water to flow out of the exit room. I fixed this and resubmitted it, sure that such a niche issue wouldn't appear.
It apparently had, as I'd passed all tests.
